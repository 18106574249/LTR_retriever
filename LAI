#!/usr/bin/perl -w
use strict;
##This script is to estimate the mean LTR sequence identity in the genome
##The script also extracts coordinate information for intact LTRs and all LTRs to calculate the LAI score
##Users should provide the LTR_retriever *pass.list file and the RepeatMasker *out file as inputs
##Author: Shujun Ou (oushujun@msu.edu)
##First version: 11/23/2016
##Beta v2: 02/05/2018
##Beta v3: 02/19/2018

my $usage="
The LTR Assembly Index (LAI) is developed to evaluate the assembly continunity of repetitive sequences
Usage: ./LAI -genome genome.fa -intact intact.pass.list -all genome.out [options]
Options:
	-genome [file]	The genome file that is used to generate everything.
	-intact [file]	A list of intact LTR-RTs generated by LTR_retriever (genome.fa.pass.list).
	-all [file]	RepeatMasker annotation of all LTR sequences in the genome (genome.fa.out).
	-window [int]	Window size for LAI estimation. Default: 3000000 (3 Mb)
	-step [int]	Step size for the estimation window to move forward. Default: 300000 (300 Kb)
	-q		Quick estimation of LTR identity (much faster for large genomes, may sacrifice ~0.5% of accuracy).
	-qq		No estimation of LTR identity, only output raw LAI for within species comparison (very quick).
	-iden [0-100]	Mean LTR identity in the monoploid (1x) genome. This parameter will inactivate de novo estimation (same speed to -qq).
	-totLTR [0-100]	Specify the total LTR sequence content (%) in the genome instead of estimating from the -all RepeatMasker file.
	-blast [path]	The path to the blastn program. If left unspecified, then blastn must be accessible via shell ENV.
	-t [number]	Number of threads to run blastn.
	-h		Display this help info.
\n";

my $window="3000000"; #3Mb/window
my $step="300000"; #300Kb/step
my $iden="NA"; #mean identity (%) of LTR sequences in the monoploid (1x) genome
my $iden_slope="2.8138"; #the correction slope for LTR sequence identity (age). Don't change this unless you are confident.
my $totLTR="NA"; #the total LTR sequence content (%) in the genome. Will be estimated from the -all RepeatMasker file if unspecified.
my $quick=0; #quick estimation of LTR identity (may sacrifice ~0.5% of accuracy)
my $qquick=0; #Obtain only raw LAI for within species comparison (very quick)
my $threads=4; #Number of threads to run blastn
my $genome='';
my $intact='';
my $all='';

my $k=0;
foreach (@ARGV){
	$genome=$ARGV[$k+1] if /^-genome$/i;
	$intact=$ARGV[$k+1] if /^-intact$/i;
	$all=$ARGV[$k+1] if /^-all$/i;
	$window=$ARGV[$k+1] if /^-window$/i;
	$step=$ARGV[$k+1] if /^-step$/i;
	$quick=1 if /^-q$/i;
	$qquick=1 if /^-qq$/i;
	$iden=$ARGV[$k+1] if /^-iden$/i;
	$iden_slope=$ARGV[$k+1] if /^-k_iden$/i;
	$totLTR=$ARGV[$k+1] if /^-totLTR$/i;
	$threads=$ARGV[$k+1] if /^-t$/i;
	die $usage if /^-?-h|help$/i;
	$k++;
	}

die $usage unless -s "$genome" and -s "$intact" and -s "$all";

my $script_path=`readlink -fn -- $0`;
$script_path=~s/(.+\/).+$/$1/;

#estimate mean identity of LTR sequences in the genome
if ($qquick != 1 and $iden eq "NA"){
	$iden=`perl $script_path/bin/Age_est.pl -RMout $all -genome $genome -t $threads -q ` if $quick == 1;
	$iden=`perl $script_path/bin/Age_est.pl -RMout $all -genome $genome -t $threads ` if $quick == 0;
	$iden = $1 if $iden=~/Mean_identity:([0-9.]+)/;
	}

#convert intact LTR information into bed format
`perl -ne 'my (\$id, \$age)=(split)[0,11]; \$age=4000000 if \$age eq \"NA\"; next unless \$id=~/:/; \$id=~s/\\.\\./\\t/g; \$id=~s/:/\\t/g; print "\$id\\t\$age\\n"' $intact > $intact.bed`;

#get all LTR sequence annotated in the genome that are no shorter than 80bp
`awk '{if (\$6~/[0-9]/ && \$7-\$6+1>=80)print \$5"\\t"\$6"\\t"\$7}' $all > $all.bed`;

#calculate the LAI score
`perl $script_path/bin/LAI_calc3.pl -intact $intact.bed -all $all.bed -genome $genome -window $window -step $step -iden $iden -k_iden $iden_slope -totLTR $totLTR > $all.LAI`;

`rm $intact.bed $all.bed`;
