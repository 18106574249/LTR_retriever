#!/usr/bin/perl -w
use strict;
use Cwd 'abs_path';
use File::Basename;

##Supported dependent program versions (or up): GenomeTools/1.5.1, BLAST+/2.2.25, BLAST/2.2.25, HMMER/3.1b1, RepeatMasker/3.3.0, CDHIT/4.5.6, and Tandem Repeats Finder 4.07b

my $help="
###########################
###### LTR_retriever ######
###########################

A program for accurate identification of LTR-RTs from outputs of LTRharvest, LTR_FINDER, and 
	MGEScan-LTR and generating non-redundant LTR-RT library for genome annotations.

Shujun Ou, Depeatment of Horticulture, Michigan State University, East Lansing, MI, 48824
05/12/2017

Usage: LTR_retriever -genome genomefile -inharvest LTRharvest_input [options]

【Input Options】
-genome      [File]	specify the genome sequence file (FASTA)
-inharvest   [File]	LTR-RT candidates from LTRharvest
-infinder    [File]	LTR-RT candidates from LTR_FINDER
-inmgescan   [File]	LTR-RT candidates from MGEScan_LTR
-nonTGCA     [File]	Non-canonical LTR-RT candidates from LTRharvest

【Output options】
-verbose/-v		retain intermediate outputs (developer mode)
-noanno			disable whole genome LTR-RT annotation (no GFF output)

【Filter options】
-misschar    [CHR]	specify the ambiguous character (default N)
-Nscreen		disable filtering ambiguous sequence in candidates
-missmax     [INT]	maximum number of ambiguous bp allowed in a candidate (default 10)
-missrate    [0-1]	maximum percentage of ambiguous bp allowed in a candidate (default 0.8)
-minlen      [INT]	minimum bp of the LTR region (default 100)
-max_ratio   [FLOAT]	maximum length ratio of internal region/LTR region (default 50)
-minscore    [INT]	minimum alignment length (INT/2) to identify tandem repeats (default 1000)
-flankmiss   [1-60]	maximum ambiguous length (bp) allowed in 60bp-flanking sequences (default 25)
-flanksim    [0-100]	minimum percentage of identity for flanking sequence alignment (default 60)
-flankaln    [0-1]	maximum alignment portion allowed for 60bp-flanking sequences (default 0.6)
-motif       [[STRING]]	specify non-canonical motifs to search for
			(default -motif [TCCA TGCT TACA TACT TGGA TATA TGTA TGCA])
-notrunc		Discard truncated LTR-RTs and nested LTR-RTs (will dampen sensitivity)
-procovTE     [0-1]	maximum portion of allowed for cumulated DNA TE database and LINE database 
			lignments (default 0.7)
-procovPL     [0-1]	maximum portion allowed for cumulated plant protein database alignments (default 0.7)
-prolensig   [INT]	minimum alignment length (bp) for LINE/DNA transposase alignment (default 90)

【Library options】
-blastclust  [[STRING]]	trigger to use blastclust and customize parameters 
			(default -blastclust [-L .9 -b T -S 80])
-cdhit       [[STRING]]	trigger to use cd-hit-est (default) and customize parameters 
			(default -cdhit [-c 0.8 -G 0.8 -s 0.9 -T 20 -aL 0.9 -aS 0.9])
-linelib     [FASTA]	provide LINE transposase database for LINE TE exclusion 
			(default /database/Tpases020812LINE)
-dnalib      [FASTA]	provide DNA TE transposase database for DNA TE exclusion 
			(default /database/Tpases020812DNA)
-plantprolib [FASTA]	provide plant protein database for coding sequence exclusion 
			(default /database/alluniRefprexp082813)
-TEhmm       [Pfam]	provide Pfam database for TE identification 
			(default /database/TEfam.hmm)

【Miscellaneous】
-u           [FLOAT]	neutral mutation rate (per bp per ya) (default 1.3e-8 (from rice))
-threads     [INT]	number of threads (≤ total available threads, default 4)
-help/-h		display this help information

######Questions and Issues Please See: https://github.com/oushujun/LTR_retriever ######

";

my $script_path=`readlink -fn -- $0`;
$script_path=~s/(.+)\/.+$/$1/;

my $inharvest=''; #screen output of LTRharvest with -motif 'TGCA' control
my $infinder=''; #screen output of LTR_finder
my $inmgescan=''; # *.ltrloc output of MGEScan
my $nonTGCA=''; #screen output of LTRharvest without -motif 'TGCA' control
my $genome;
my $Nscreen=" "; #blank enables filtering base on the number of missing characters; "-Nscreen" disable $n_count screening in cleanup.pl
my $misschar="N"; #missing character 'N'
my $missmax=10; #maximum missing characters in a sequence
my $missrate=0.8; #maximum missing rate in a sequence
my $minscore=1000; #minscore of tandem repeats finder
my $minlen=100; #dft=100, minmum LTR region length
my $max_ratio=50; #maximum internal/LTR region length ratio

my $bondcorr=1; #1 means correct the boundary (strongly recommended); 0 means not.
my $flanksim=60; #minimum percent similarity of flanking sequence alignment
my $flankmiss=25; #minimum ambiguous characters in 50bp-flanking sequences
my $flankaln=0.6; #
my $tsdaln=" "; #blank means align the TSD (strongly recommended); "-tsdaln" means not.
my @motif=qw/TCCA TGCT TACA TACT TGGA TATA TGTA TGCA/; #known motifs. The last one in the list (default TGCA) will be preferentially identified over the others

my $procovTE=0.7; #for DNA TE and LINE alignment, propotional, cumulated alignment coverage more than this will be treated as protein contained
my $procovPL=0.7; #for plant protein alignment, propotional, cumulated alignment coverage more than this will be treated as protein contained
my $prolensig=90; #bp, hits with alignment length less than this number will not be counted.

my $blastclust=0; #1 for using blastclust as clustering method, 0 for no.
my $cdhit=1; #1 for using cdhit as clustering method, 0 for no.
my $set_bclust="-L 0.9 -b T -S 80"; #set parameters for blastclust
my $set_cdhit="-c 0.8 -G 0.8 -s 0.9 -aL 0.9 -aS 0.9 -M 0"; #set parameters for cdhit

my $keep_trunc="1"; #1 will recycle information from truncated LTR; 0 will disable this module
my $gff3=1; #0 will not make gff3 file; 1 will.
my $verbose=0; #0 will delete intermediate files after analysis; 1 will not.
my $annotation=1; #1 will perform whole genome LTR annotation; 0 will not

my $LINE="$script_path/database/Tpases020812LINE";
my $DNA="$script_path/database/Tpases020812DNA";
my $PlantP="$script_path/database/alluniRefprexp082813";
my $TEhmm="$script_path/database/TEfam.hmm";

my $miu="1.3e-8"; #neutral mutation rate of the target species (per bp per ya), e.g., rice: 1.3e-8 (Ma and Bennetzen 2004); mammal: 2.2e−9 (S. Kumar 2002); Drosophila: 1.6e-8 (Bowen and McDonald 2001);

my $threads=4;
my $version="v1.5";
#my $scn=''; #store screen output information

my $k=0;
my $argv='';
foreach (@ARGV){
	$argv.="$_ ";
	$inharvest=$ARGV[$k+1] if /^-inharvest$/i and $ARGV[$k+1]!~/^-/;
	$infinder=$ARGV[$k+1] if /^-infinder$/i and $ARGV[$k+1]!~/^-/;
	$inmgescan=$ARGV[$k+1] if /^-inMGEScan$/i and $ARGV[$k+1]!~/^-/;
	$nonTGCA=$ARGV[$k+1] if /^-nonTGCA$/i and $ARGV[$k+1]!~/^-/;
	$genome=$ARGV[$k+1] if /^-genome$/i and $ARGV[$k+1]!~/^-/;
	$misschar=$ARGV[$k+1] if /^-misschar$/i and $ARGV[$k+1]!~/^-/;
	$Nscreen="-Nscreen" if /^-Nscreen$/i;
	$missmax=$ARGV[$k+1] if /^-missmax$/i and $ARGV[$k+1]!~/^-/;
	$missrate=$ARGV[$k+1] if /^-missrate$/i and $ARGV[$k+1]!~/^-/;
	$minscore=$ARGV[$k+1] if /^-minscore$/i and $ARGV[$k+1]!~/^-/;
	$bondcorr=0 if /^-bondcorr$/i;
	$flanksim=$ARGV[$k+1] if /^-flanksim$/i and $ARGV[$k+1]!~/^-/;
	$flankmiss=$ARGV[$k+1] if /^-flankmiss$/i and $ARGV[$k+1]!~/^-/;
	$flankaln=$ARGV[$k+1] if /^-flankaln$/i and $ARGV[$k+1]!~/^-/;
	$minlen=$ARGV[$k+1] if /^-minlen$/i and $ARGV[$k+1]!~/^-/;
	$max_ratio=$ARGV[$k+1] if /^-max_ratio$/i and $ARGV[$k+1]!~/^-/;
	$tsdaln="-tsdaln" if /^-tsdaln$/i;
	@motif=(split /\s+/, $1) if $argv=~/-motif\s+\[([atcgnx ]+)\]/i;
	$procovPL=$ARGV[$k+1] if /^-procovPL$/i and $ARGV[$k+1]!~/^-/;
	$procovTE=$ARGV[$k+1] if /^-procovTE$/i and $ARGV[$k+1]!~/^-/;
	$prolensig=$ARGV[$k+1] if /^-prolensig$/i and $ARGV[$k+1]!~/^-/;
	$LINE=$ARGV[$k+1] if /^-linelib$/i and $ARGV[$k+1]!~/^-/;
	$DNA=$ARGV[$k+1] if /^-dnalib$/i and $ARGV[$k+1]!~/^-/;
	$PlantP=$ARGV[$k+1] if /^-plantprolib$/i and $ARGV[$k+1]!~/^-/;
	$TEhmm=$ARGV[$k+1] if /^-TEhmm$/i and $ARGV[$k+1]!~/^-/;
	$miu=$ARGV[$k+1] if /^-u$/i and $ARGV[$k+1]!~/^-/;
	$blastclust=1 if /^-blastclust$/i;
	$set_bclust=$1 if $argv=~/-blastclust\s+\[(.+?)\]/i;
	$cdhit=1 if /^-cdhit$/i;
	$set_cdhit=$1 if $argv=~/-cdhit\s+\[(.+?)\]/i;
	$keep_trunc=0 if /^-notrunc$/i;
	$annotation=0 if /^-noanno$/i;
	$verbose=1 if /^-verbose|-v$/i;
	$threads=$ARGV[$k+1] if /^-threads$/i and $ARGV[$k+1]!~/^-/;
	die $help if /^--help|-h$/i;
	$k++;
        }

die "Please specify the input sequence file!\n" unless (defined $genome);
die "Please specify LTRharvest or LTR_finder screen output file!\n" unless (defined $inharvest or defined $infinder);

##read paths to dependent programs
my $blastplus='';
my $repeatmasker='';
my $hmmer='';
my $blast='';
my $cdhitpath='';

open Path, "<$script_path/paths" or die "Fail to locate the paths file!\n";
my %path = ("BLAST+"=>'', "HMMER"=>'', "BLAST"=>'', "CDHIT"=>'', "RepeatMasker"=>'');
while (<Path>){
	next if /^#/;
	next if /^\s+$/;
	next unless /=/;
	chomp;
	my ($program, $path)=(split /=/, $_, 2);
	$path=~s/(\s+)?#.*$//;
	$path=~s/\s+//g;
	$path="$path"."/" if $path!~/\/$/;
	$path='' if $path eq '/';
	$path{$program}=$path;
	}
close Path;
$blastplus=$path{"BLAST+"};
$repeatmasker=$path{"RepeatMasker"};
$hmmer=$path{"HMMER"};
$blast=$path{"BLAST"};
$cdhitpath=$path{"CDHIT"};

##test paths to dependent programs
#makeblastdb
$blastplus=`which makeblastdb 2>/dev/null` if $blastplus eq '';
$blastplus=~s/makeblastdb\n//;
die "makeblastdb is not exist in the BLAST+ path $blastplus!\n" unless -X "${blastplus}makeblastdb";
#blastn
$blastplus=`which blastn 2>/dev/null` if $blastplus eq '';
$blastplus=~s/blastn\n//;
die "blastn is not exist in the BLAST+ path $blastplus!\n" unless -X "${blastplus}blastn";
#blastx
$blastplus=`which blastx 2>/dev/null` if $blastplus eq '';
$blastplus=~s/blastx\n//;
die "blastx is not exist in the BLAST+ path $blastplus!\n" unless -X "${blastplus}blastx";
#RepeatMasker
$repeatmasker=`which RepeatMasker 2>/dev/null` if $repeatmasker eq '';
$repeatmasker=~s/RepeatMasker\n//;
die "RepeatMasker is not exist in the RepeatMasker path $repeatmasker!\n" unless -X "${repeatmasker}RepeatMasker";
`cp $script_path/database/dummy060817.fa ./`;
my $RM_test=`${repeatmasker}RepeatMasker -e ncbi -q -pa 1 -no_is -norna -nolow dummy060817.fa -lib dummy060817.fa`;
die "The RMblast engine is not installed in RepeatMasker!\n" unless $RM_test=~s/done//gi;
`rm dummy060817.fa*`;
#hmmsearch
$hmmer=`which hmmsearch 2>/dev/null` if $hmmer eq '';
$hmmer=~s/hmmsearch\n//;
die "hmmsearch is not exist in the HMMER path $hmmer!\n" unless -X "${hmmer}hmmsearch";
#blastclust
$blast=`which blastclust 2>/dev/null` if $blast eq '';
$blast=~s/blastclust\n//;
die "blastclust is not exist in the BLAST path $blast!\n" if (!(-X "${blast}blastclust") and $blastclust);
#cd-hit-est
$cdhitpath=`which cd-hit-est 2>/dev/null` if $cdhitpath eq '';
$cdhitpath=~s/cd-hit-est\n//;
die "cd-hit-est is not exist in the CDHIT path $cdhitpath!\n" if (!(-X "${cdhitpath}cd-hit-est") and $cdhit);
die "neither the path of CDHIT nor BLAST is specified!\n" unless (-X "${blast}blastclust" or -X "${cdhitpath}cd-hit-est");

print "
##########################
### LTR_retriever $version ###
##########################\n
Contributors: Shujun Ou, Ning Jiang\n
Parameters: @ARGV\n\n\n";

my $rand=int(rand(1000000));
my ($LINE_base, $LINE_path)=fileparse($LINE);
my ($DNA_base, $DNA_path)=fileparse($DNA);
my ($PlantP_base, $PlantP_path)=fileparse($PlantP);
`cp $LINE ./$LINE_base.$rand`;
`cp $DNA ./$DNA_base.$rand`;
`cp $PlantP ./$PlantP_base.$rand`;
$LINE="$LINE_base.$rand";
$DNA="$DNA_base.$rand";
$PlantP="$PlantP_base.$rand";

`${blastplus}makeblastdb -in $LINE -dbtype prot`;
`${blastplus}makeblastdb -in $DNA -dbtype prot`;
`${blastplus}makeblastdb -in $PlantP -dbtype prot`;
my $date=`date +"%m-%d-%y_%H%M"`;
chomp ($date);
if (`ls $genome*|wc -l`>15){
	print "Previous LTR_retriever results found, backed up to LTRretriever-pre$date\n\n";
	`mkdir LTRretriever-pre$date; mv $genome*.LDI $genome*.LTRlib* $genome*defalse $genome*.ltrTE* $genome*.retriever.* $genome*.prelib* $genome*.pass.list* LTRretriever-pre$date/ 2>/dev/null`; # if `ls $genome*|wc -l`>15;
}


###################################################################
######### To retrieve high quality LTRs with TGCA motif ###########
###################################################################

my $index=$genome;
#die "\nERROR: Genome file $genome not exist.\n\n" if -s "$genome"==0;
##check the length of genome sequence IDs, if longer than 15bp, chop it.
my $id_mode=0; #record the mode of id conversion.
my $id_len=`grep \\> $genome|perl -ne 'chomp; my \$len=length \$_; \$max=\$len if \$max<\$len; print "\$max\\n"'`;
$id_len=(split /\s+/, $id_len)[-1];
if ($id_len>15){
	$date=`date`;
	chomp ($date);
	print "$date\tThe longest sequence ID in the genome contains $id_len characters, which is longer than the limit (15)\n";
	print "\t\t\t\tTrying to reformat seq IDs...\n\t\t\t\tAttempt 1...\n";
	`perl -ne 'chomp; if (s/^>+//) {\$_=(split)[0]; s/(.{1,15}).*/>\$1/g;} print "\$_\n"' $genome > $genome.mod`;
	my $old_id=`grep \\> $genome|sort -u|wc -l`;
	my $new_id=`grep \\> $genome.mod|sort -u|wc -l`;
	$date=`date`;
	chomp ($date);
	if ($old_id==$new_id){
		$id_mode=1;
		$index="$genome.mod";
		$genome="$genome.mod";
		print "$date\tSeq ID conversion successful!\n\n";
		} else {
		print "\t\t\t\tAttempt 2...\n";
		`perl -ne 'chomp; if (/^>/) {\$_=">\$1" if /([0-9]+)/;} print "\$_\n"' $genome > $genome.mod`;
		$new_id=`grep \\> $genome.mod|sort -u|wc -l`;
		if ($old_id==$new_id){
			$id_mode=2;
			$index="$genome.mod";
			$genome="$genome.mod";
			print "$date\tSeq ID conversion successful!\n\n";
			} else {
			`rm $genome.mod`;
			die "$date\tERROR: Fail to convert seq IDs to less than 15 characters! Please provide a genome with shorter seq IDs.\n\n";
			}
		}
	}

##obtain initial LTR candidates from LTRharvest and/or LTR_finder screen outputs
die "\nERROR: The specified file $nonTGCA is not exist.\n\n" if $nonTGCA!~/^$/ and !-e "$nonTGCA";
die "\nERROR: The specified file $infinder is not exist.\n\n" if $infinder!~/^$/ and !-e "$infinder";
die "\nERROR: The specified file $inmgescan is not exist.\n\n" if $inmgescan!~/^$/ and !-e "$inmgescan";
die "\nERROR: The specified file $inharvest is not exist.\n\n" if $inharvest!~/^$/ and !-e "$inharvest";
$date=`date`;
chomp ($date);
print "$date\tStart to convert inputs...\n";
`perl $script_path/bin/convert_ltr_finder.pl $infinder $id_mode > $index.retriever.scn` if -s $infinder;
`perl $script_path/bin/convert_MGEScan.pl $inmgescan >> $index.retriever.scn` if -s $inmgescan;
`cat $inharvest >> $index.retriever.scn` if -s $inharvest;
die "\nERROR: No candidate is found in the file(s) you specified.\n\n" unless `grep -c -v \'#\' $index.retriever.scn`>0;
`perl $script_path/bin/get_range.pl 1 $index.retriever.scn $genome -f -g -max_ratio $max_ratio`;
`cat $index.retriever.scn.full|sort -fu >$index.retriever.scn.full.uniq; mv $index.retriever.scn.full.uniq $index.retriever.scn.full`;
`perl $script_path/bin/call_seq_by_list.pl $index.retriever.scn.full -C $genome > $index.ltrTE.fa`;
#update status
my $total_candidate=`grep -v -c '#' $index.retriever.scn`;
$total_candidate=~s/\s+//g;
my $uniq_candidate=`wc -l $index.retriever.scn.full`;
$uniq_candidate=(split /\s+/, $uniq_candidate)[0];
print "\t\t\t\tTotal candidates: $total_candidate
\t\t\t\tTotal uniq candidates: $uniq_candidate\n\n";

##cleanup the NNNs and tandem sequence
my $stg1_count=&cleanTandem($index);
#update status
#my $stg1_count=`grep -c \> $index.ltrTE.stg1`;
$date=`date`;
chomp ($date);
print "$date\t$stg1_count clean candidates remained\n\n";
goto NEXT if $stg1_count==0;

##Major program, align the boundaries
my $pass_count=&Identifier($index);
$date=`date`;
chomp ($date);
print "$date\tIntact LTR found: $pass_count\n\n";
goto NEXT if $pass_count==0;

##Recycle truncated candidates, mask candidates by false LTR
&trunc($index);

##clean up protein coding sequence from DNA TE, LINE, and normal plant genes
&proMask($index);

##generate non-redudant library for pass LTR candidates
$date=`date`;
chomp ($date);
my $prelib_size=-s "$index.ltrTE";
die "ERROR: $pass_count intact LTRs have found, but the pre-library file $index.ltrTE is empty.
Something is wrong at this point. Please report the bug to https://github.com/oushujun/LTR_retriever/issues
Program halt!\n" unless $prelib_size>0;

print "$date\tSequence clustering for $index.ltrTE ...\n";
&makeLib("$index.ltrTE");
`perl $script_path/bin/annotate_lib.pl $index.retriever.scn.adj $index.ltrTE.clust > $index.prelib`;
my $lib_count=`grep -c \\> $index.prelib`;
print "$date\tUnique lib sequence: $lib_count\n";

###################################################################
####### To retrieve high quality LTRs with non-TGCA motif ##########
###################################################################
NEXT:
goto End if $nonTGCA eq '';
$date=`date`;
chomp ($date);
print "$date\tStart to analyze non-TGCA LTR candidates...\n";

my $index2="$index.nmtf";
`cp $nonTGCA $index2.retriever.scn`;
$total_candidate=`grep -v -c \'#\' $index2.retriever.scn`;
$total_candidate=~s/\s+//g;
$total_candidate=0 if $total_candidate!~/[0-9]+/;
print "\t\t\t\tTotal non-TGCA candidates: $total_candidate\n";
goto End if $total_candidate eq 0;
print "$date\tStart to remove non-TGCA candidates that are >=60% identical to TGCA LTRs...\n";

##get LTR regions from non-TGCA raw candidates (original internal boundary)
&getLTR($index2);
goto End unless -s "$index2.ltrTE.LTR";

if (`grep -c -v \'#\' $index.ltrTE.pass.list`>0){
##get LTR regions from TGCA pass candidates and mask LTR regions (no internal regions) from non-TGCA raw candidates
	`perl $script_path/bin/get_range.pl 1 $index.retriever.scn.adj $index.ltrTE.pass.list -N -max_ratio $max_ratio`;
	`cat $index.retriever.scn.adj.list|sort -fu > $index.retriever.scn.adj.list.unq; mv $index.retriever.scn.adj.list.unq $index.retriever.scn.adj.list`;
	`perl $script_path/bin/call_seq_by_list.pl $index.retriever.scn.adj.list -C $genome itself > $index.ltrTE.pass.LTR`;

##condense the pass.LTR lib if size exceed 15M to enhance speed
	&makeLib("$index.ltrTE.pass.LTR") if (-s "$index.ltrTE.pass.LTR")>15000000;
	`mv $index.ltrTE.pass.LTR.clust $index.ltrTE.pass.LTR` if -s "$index.ltrTE.pass.LTR.clust";
	`${repeatmasker}RepeatMasker -e ncbi -qq -pa $threads -no_is -norna -nolow -div 40 -lib $index.ltrTE.pass.LTR -cutoff 225 $index2.ltrTE.LTR 2>/dev/null`;
	}
	
##cleanup highly masked sequence and tandem sequence from masked LTR regions (no internal)
	if (-s "$index2.ltrTE.LTR.masked"){
		`perl $script_path/bin/cleanup.pl -minscore 150 -Nscreen -nr 0.6 -f $index2.ltrTE.LTR.masked > $index2.ltrTE.stg1`;
		} else {
		`cp $index2.ltrTE.LTR $index2.ltrTE.stg1`;
		}

#update status
$date=`date`;
chomp ($date);
$uniq_candidate=`grep -c \\> $index2.ltrTE.stg1`;
$uniq_candidate=~s/\s+//g;
$uniq_candidate=int($uniq_candidate/2);
print "$date\tTotal uniq non-TGCA candidates: $uniq_candidate\n\n";

##cleanup the NNNs and tandem sequence from candidates (including internal regions)
$minscore=150;
`cp $index2.ltrTE.stg1 $index2.ltrTE.fa`;
$stg1_count=&cleanTandem($index2);
$stg1_count=int($stg1_count/2);
$date=`date`;
chomp ($date);
print "$date\t$stg1_count clean non-TGCA candidates remained\n\n";
goto End if $stg1_count==0;

##Major program, align the boundaries
$pass_count=&Identifier($index2);
$date=`date`;
chomp ($date);
print "$date\tIntact non-TGCA LTR found: $pass_count\n\n";

#Aggregate all candidates into one list
`cat $index.retriever.scn.adj $index2.retriever.scn.adj > $index.retriever.all.scn`;
goto End if $pass_count==0;

##Recycle truncated candidates, mask candidates by false LTR
&trunc($index2);

##DNA TE element and LINE protein masking
&proMask($index2);

##All passed LTR candidates, including internal region and the longer LTR region for truncated LTR candidates
`perl $script_path/bin/annotate_lib.pl $index2.retriever.scn.adj $index2.ltrTE >> $index.prelib`; #contains both TGCA and nmtf LTR-RT

End:
`cp $index.retriever.scn.adj $index.retriever.all.scn` unless (-s "$index.retriever.all.scn");

##obtain good nmtf entries from index.ltrTE and index2.ltrTE using $genome.nmtf.pass.list
`touch $genome.nmtf.pass.list`;
if (`grep -c -v \'#\' $genome.nmtf.pass.list`>0){
	`perl $script_path/bin/get_range.pl 1 $index.retriever.all.scn $genome.nmtf.pass.list -i -N`;
	`perl $script_path/bin/output_by_list.pl 1 $index.ltrTE 2 $index.retriever.all.scn.list -FA -MSU0 -MSU1 > $index.ltrTE.nmtf`;
	`perl $script_path/bin/output_by_list.pl 1 $index2.ltrTE 2 $index.retriever.all.scn.list -FA -MSU0 -MSU1 >> $index.ltrTE.nmtf` if defined $index2;
	`perl $script_path/bin/annotate_lib.pl $index.retriever.all.scn $index.ltrTE.nmtf > $index.nmtf.prelib`;
	}

`touch $index.prelib`;
my $prelib_count=`grep -c \\> $index.prelib`;
$prelib_count=~s/\s+//g;
if ($prelib_count>0){

$date=`date`;
chomp ($date);
print "$date\tStart to remove nested insertions in internal regions...\n";

##get rid of solo LTR nested in internal regions
`grep \\> $index.prelib|grep -i 'INT#LTR'|sort -u > $index.prelib.INT.list`;
`grep \\> $index.prelib|grep -i -v 'INT#LTR'|sort -u > $index.prelib.LTR.list`;
if (-s "$index.prelib.INT.list" and -s "$index.prelib.LTR.list"){
	`perl $script_path/bin/output_by_list.pl 1 $index.prelib 1 $index.prelib.INT.list -FA > $index.prelib.INT`;
	`perl $script_path/bin/output_by_list.pl 1 $index.prelib 1 $index.prelib.LTR.list -FA > $index.prelib.LTR`;
	&makeLib("$index.prelib.LTR");
	`${repeatmasker}RepeatMasker -e ncbi -q -pa $threads -no_is -norna -nolow -div 40 -lib $index.prelib.LTR.clust -cutoff 225 $index.prelib.INT > /dev/null 2>&1`;
	if (-e "$index.prelib.INT.masked"){
		`perl $script_path/bin/cleanup.pl -nr 0.8 -trf -cleanN -f $index.prelib.INT.masked > $index.prelib.INT.cln`; #only non-solo-LTR-nested IN regions
		} else {
		`cp $index.prelib.INT $index.prelib.INT.cln`;
		}
	`cat $index.prelib.LTR $index.prelib.INT.cln > $index.LTRlib`;

#update status
	$date=`date`;
	chomp ($date);
	my $ori_size=-s "$index.prelib.INT";
	my $cln_size=-s "$index.prelib.INT.cln";
	print "\nWarning: RepeatMasker seems to be not running correctly! Please check this program by running:
	RepeatMasker -e ncbi -q -pa $threads -no_is -norna -nolow -div 40 -lib $index.prelib.LTR.clust -cutoff 225 $index.prelib.INT
	Please report any errors to https://github.com/oushujun/LTR_retriever/issues\n\n" if $ori_size>0 and $cln_size==0;
	print "$date\tRaw internal region size (bit): $ori_size\n\t\t\t\tClean internal region size (bit): $cln_size\n\n";
	} else {
	`cp $index.prelib $index.LTRlib`;
	}
if ( -s "$index.nmtf.prelib"){
	`perl $script_path/bin/output_by_list.pl 1 $index.prelib.INT.cln 1 $index.nmtf.prelib -FA > $index.nmtf.LTRlib.fa`;
	`grep INT $index.nmtf.prelib|perl $script_path/bin/output_by_list.pl 1 $index.nmtf.prelib 1 - -FA -ex >> $index.nmtf.LTRlib.fa`;
	}

#update status
$date=`date`;
chomp ($date);
print "$date\tStart to make non-redundant library...\n\n";

##make non-redundant library and format output
&makeLib("$index.LTRlib");
if (-s "$index.LTRlib.clust"){
	`perl $script_path/bin/fasta-reformat.pl $index.LTRlib.clust 50 > $index.LTRlib.fa`;
	`rm $index.LTRlib.clust`;
	} else {
	$date=`date`;
	chomp ($date);
	print "$date\tMake library for $index.LTRlib failed! Please check the file\n\n";
	}

#update status
my $lib_count=`grep -c \\> $index.LTRlib.fa`;
$lib_count=~s/\s+//g;
my $lib_size=-s "$index.LTRlib.fa";
$date=`date`;
chomp ($date);
print "$date\tFinal LTR library entries: $lib_count
\t\t\t\tFinal LTR library size (bit): $lib_size\n\n";

##Format outputs and cleanup intermediate files
`echo '\#LTR_loc        Category        Motif   TSD     5'_TSD        3'_TSD       Internal        Similarity      Strand  Family  Superfamily     Insertion_Time' > $genome.pass.list.unq`;
`sort -uV -k1,4 $genome.pass.list >> $genome.pass.list.unq; mv $genome.pass.list.unq $genome.pass.list`;
`echo '\#LTR_loc	Category	Motif	TSD	5'_TSD	3'_TSD	Internal	Similarity	Strand	Family	Superfamily	Insertion_Time' > $genome.nmtf.pass.list.unq`;
`sort -uV -k1,4 $genome.nmtf.pass.list >> $genome.nmtf.pass.list.unq; mv $genome.nmtf.pass.list.unq $genome.nmtf.pass.list`;

#update status
my $pass_count=`grep -c -v \'#\' $genome.pass.list`;
my $nmtf_count=`grep -c -v \'#\' $genome.nmtf.pass.list`;
$pass_count=~s/\s+//g;
$nmtf_count=~s/\s+//g;
$date=`date`;
chomp ($date);
print "$date\tTotal intact LTRs found: $pass_count
\t\t\t\tTotal intact non-TGCA LTRs found: $nmtf_count\n\n";

`perl $script_path/bin/make_gff3.pl $genome $genome.pass.list` if $gff3==1;
##Annotate LTR-RT in the genome
$date=`date`;
chomp ($date);
if ($annotation==1){
	$date=`date`;
	chomp ($date);
	print "$date\tStart to annotate whole-genome LTRs...\n\n";
	`${repeatmasker}RepeatMasker -e ncbi -pa $threads -q -no_is -norna -nolow -gff -div 40 -lib $genome.LTRlib.fa -cutoff 225 $genome > /dev/null 2>&1`;
	`perl $script_path/bin/annotate_gff.pl $genome.LTRlib.fa $genome.out.gff > $genome.LTRanno.gff`;
	`perl $script_path/LAI $genome.pass.list $genome.out $genome`;
	}
} else {
$date=`date`;
chomp ($date);
print "$date\tNo LTR was found in your data.\n\n";
}

`perl $script_path/bin/cleanOutput.pl $genome $LINE $DNA $PlantP` if $verbose==0;
$date=`date`;
chomp ($date);
print "$date\tAll analyses were finished!\n";
if ($prelib_count>0){
print "
##############################
####### Result files #########
##############################

Table output for intact LTRs (detailed info)
	$genome.pass.list (All LTRs)
	$genome.nmtf.pass.list (Non-TGCA LTRs)\n
LTR library
	$index.LTRlib.fa (All non-redundant LTRs)
	$index.nmtf.LTRlib.fa (Non-TGCA LTRs)\n
";
print "GFF3 file for intact LTRs\n\t$genome.pass.list.gff3\n\n" if $gff3==1;
print "Whole-genome LTR annotation (GFF)\n
	$genome.LTRanno.gff\n
LTR Assembly Index (LAI)
	$genome.out.LAI\n\n" if $annotation==1;
}


###################################################################
################# A collection of subroutines #####################
###################################################################

sub cleanTandem {
##cleanup the NNNs and tandem sequence
$date=`date`;
chomp ($date);
print "$date\tStart to clean up candidates...
\t\t\t\tSequences with $missmax missing bp or $missrate missing data rate will be discarded.
\t\t\t\tSequences containing tandem repeats will be discarded.\n\n";

my $index=$_[0];
`perl $script_path/bin/cleanup.pl $Nscreen -misschar $misschar -nc $missmax -nr $missrate -minscore $minscore -f $index.ltrTE.fa > $index.ltrTE.stg1`;
my $count=0;
$count=`grep -c \\> $index.ltrTE.stg1`;
$count=~s/\s+//g;
return $count;
}

sub Identifier {
##Major program, align the boundaries
$date=`date`;
chomp ($date);
print "$date\tStart to analyze the structure of candidates...
\t\t\t\tThe terminal motif, TSD, boundary, orientation, age, and family will be identified in this step.\n\n";
my $index=$_[0];
`perl $script_path/bin/get_range.pl 1 $index.retriever.scn $index.ltrTE.stg1 -x`;
`cat $index.retriever.scn.extend |sort -fu > $index.retriever.scn.extend.unq; mv $index.retriever.scn.extend.unq $index.retriever.scn.extend`;
`perl $script_path/bin/call_seq_by_list.pl $index.retriever.scn.extend -C $genome > $index.retriever.scn.extend.fa`; #full TE sequence with 50bp-extended on each side
`perl $script_path/bin/Six-frame_translate.pl $index.retriever.scn.extend.fa > $index.retriever.scn.extend.fa.aa`; ##six-frame translate candidate sequences
`${hmmer}hmmsearch --tblout $index.retriever.scn.extend.fa.aa.tbl --notextw --cpu $threads -E 0.05 --domE 0.05 --noali $TEhmm $index.retriever.scn.extend.fa.aa > $index.retriever.scn.extend.fa.aa.scn`;
`touch $index.retriever.scn.extend.fa.aa.tbl` unless -s "$index.retriever.scn.extend.fa.aa.tbl";
`perl $script_path/bin/annotate_TE.pl $index.retriever.scn.extend.fa.aa.tbl > $index.retriever.scn.extend.fa.aa.anno`;
`perl $script_path/bin/LTR.identifier.pl $index -list $index.retriever.scn -seq $index.retriever.scn.extend.fa -anno $index.retriever.scn.extend.fa.aa.anno -flanksim $flanksim -flankmiss $flankmiss -flankaln $flankaln -minlen $minlen $tsdaln -u $miu -threads $threads -blastplus $blastplus -motif @motif > $index.defalse`;
`grep -i pass $index.defalse|grep -i -v -P 'notLTR|mixture' > $index.ltrTE.pass.list`;
my $count=0;
$count=`grep -v -c \'#\' $index.ltrTE.pass.list`;
$count=~s/\s+//g;
return $count;
}

sub trunc {
my $index=$_[0];
##get lLTR, rLTR, and IN from pass and clusterize
`perl $script_path/bin/get_range.pl 1 $index.retriever.scn.adj $index.ltrTE.pass.list -i -N`;
`cat $index.retriever.scn.adj.list|sort -fu > $index.retriever.scn.adj.list.unq; mv $index.retriever.scn.adj.list.unq $index.retriever.scn.adj.list`;
`perl $script_path/bin/call_seq_by_list.pl $index.retriever.scn.adj.list -C $genome > $index.ltrTE.pass`; #lLTR, rLTR, and IN regions seperated of pass entries
&makeLib("$index.ltrTE.pass");
`mv $index.ltrTE.pass.clust $index.ltrTE.stg2`; #lLTR, rLTR, and IN from pass

if ($keep_trunc){
$date=`date`;
chomp ($date);
print "$date\tStart to analyze truncated LTRs...
\t\t\t\tTruncated LTRs without the intact version will be retained in the LTR library.
\t\t\t\tUse -notrunc if you don't want to keep them.\n\n";

##get longer LTR and IN from trunc and masked by pass
`grep -i trunc $index.defalse|grep -i -v -P 'notLTR|mixture|\\s+NA'|awk '{print \$1"\t"\$1}' > $index.ltrTE.trunc.list`;
my $trunc=0;
$trunc=`wc -l $index.ltrTE.trunc.list`;
$trunc=(split /\s+/, $trunc)[0];
$date=`date`;
chomp ($date);
print "$date\t$trunc truncated LTRs found\n";
if ($trunc>0){
`perl $script_path/bin/get_range.pl 1 $index.retriever.scn.adj $index.ltrTE.trunc.list -i -N -L`;
`cat $index.retriever.scn.adj.list|sort -fu > $index.retriever.scn.adj.list.unq; mv $index.retriever.scn.adj.list.unq $index.retriever.scn.adj.list`;
`perl $script_path/bin/call_seq_by_list.pl $index.retriever.scn.adj.list -C $genome > $index.ltrTE.trunc`; #IN and the longer LTR region
#`perl -i -ne 's/>(.*)\\\|(.*)/>\$2/g;print "\$_"' $index.ltrTE.trunc`;
`perl -i -ne 's/>(.*)\\|(.*)\\[(.+)\\]/>\$1\\|LTR_\$3/g;print "\$_"' $index.ltrTE.trunc`;

`grep -i false $index.defalse|grep -i notLTR|grep -i -v 'motif:TGCA' > $index.ltrTE.veryfalse.list`;
`awk '{print \$1"\\t"\$1}\' $index.ltrTE.veryfalse.list > $index.ltrTE.veryfalse`;
`perl $script_path/bin/call_seq_by_list.pl $index.ltrTE.veryfalse -C $genome > $index.ltrTE.veryfalse.fa`;
`cat $index.ltrTE.stg2 $index.ltrTE.veryfalse.fa > $index.ltrTE.mask.lib`;
`${repeatmasker}RepeatMasker -e ncbi -q -pa $threads -no_is -norna -nolow -div 40 -lib $index.ltrTE.mask.lib -cutoff 225 $index.ltrTE.trunc > /dev/null 2>&1`;
#if (-s "$index.ltrTE.trunc.masked"){
#file checking
die "ERROR: RepeatMasker is not running properly!
	Please check the file $index.ltrTE.mask.lib and $index.ltrTE.trunc and test run:
		RepeatMasker -e ncbi -q -pa $threads -no_is -norna -nolow -div 40 -lib $index.ltrTE.mask.lib -cutoff 225 $index.ltrTE.trunc
	Please report errors to https://github.com/oushujun/LTR_retriever/issues\nProgram halt!\n" unless -s "$index.ltrTE.trunc.masked";

`perl $script_path/bin/cleanup.pl -nr 0.8 -trf -cleanN -f $index.ltrTE.trunc.masked > $index.ltrTE.trunc.cln`;
`cat $index.ltrTE.stg2 $index.ltrTE.trunc.cln > $index.ltrTE.stg3.cln`;
	} else {
#	`cp $index.ltrTE.trunc $index.ltrTE.trunc.cln`;
	`cp $index.ltrTE.stg2 $index.ltrTE.stg3.cln`;
	}
my $trunc_lib=0;
$trunc_lib=`grep -c \\> $index.ltrTE.trunc.cln` if -s "$index.ltrTE.trunc.cln";
$trunc_lib=~s/\s+//g;
$date=`date`;
chomp ($date);
print "$date\t$trunc_lib truncated LTR sequences have added to the library\n\n";

} else {
print "Attention: No truncated LTRs will be saved in the final LTR library.\n\n";
`cp $index.ltrTE.stg2 $index.ltrTE.stg3.cln`;
}
}

sub proMask {
my $index=$_[0];
my $raw_lib_count=`grep -c \\> $index.ltrTE.stg3.cln`;
$raw_lib_count=~s/\s+//g;
$date=`date`;
chomp ($date);
print "$date\tStart to remove DNA TE and LINE transposases, and remove plant protein sequences...
\t\t\t\tTotal library sequences: $raw_lib_count\n";

##DNA TE transposase, LINE transposase, and plant protein masking
`${blastplus}blastx -word_size 3 -outfmt 6 -max_target_seqs 10 -num_threads $threads -query $index.ltrTE.stg3.cln -db $LINE -out $index.ltrTE.stg3.line.out`;
`${blastplus}blastx -word_size 3 -outfmt 6 -max_target_seqs 10 -num_threads $threads -query $index.ltrTE.stg3.cln -db $DNA -out $index.ltrTE.stg3.dna.out`;
`cat $index.ltrTE.stg3.line.out $index.ltrTE.stg3.dna.out > $index.ltrTE.stg3.otherTE.out`;
`perl $script_path/bin/purger.pl -blast $index.ltrTE.stg3.otherTE.out -seq $index.ltrTE.stg3.cln -cov $procovTE -purge 0 -len $prolensig`;

`${blastplus}blastx -word_size 3 -outfmt 6 -max_target_seqs 10 -num_threads $threads -query $index.ltrTE.stg3.cln.clean -db $PlantP -out $index.ltrTE.stg3.plantP.out`;
`perl $script_path/bin/purger.pl -blast $index.ltrTE.stg3.plantP.out -seq $index.ltrTE.stg3.cln.clean -cov $procovPL -purge 1 -len $prolensig`;
`mv $index.ltrTE.stg3.cln.clean.clean $index.ltrTE`;
`grep -i -v 'motif:TGCA' $index.ltrTE.pass.list | grep -i -P 'motif:T...\\s+' | grep -i -P 'TSD:.....\\s+' | grep -i -v 'TSD:NA' > $index.ltrTE.pass.nmtf.list`;
`cat $index.ltrTE.pass.nmtf.list >> $genome.nmtf.pass.list` ;
`cat $index.ltrTE.pass.list >> $genome.pass.list`;
$date=`date`;
chomp ($date);
my $cln_lib_count=`grep -c \\> $index.ltrTE`;
$cln_lib_count=~s/\s+//g;
print "$date\tRetained clean sequence: $cln_lib_count\n\n";
}

sub makeLib {
##generate non-redudant library for input sequences
my $seq=$_[0];
print "ERROR: $seq is empty, please check the last file\n" unless -s "$seq";
if ($blastclust==1){
	`cp $seq $seq.tmp`;
	`${blast}blastclust -i $seq.tmp -o $seq.clust.info -a $threads -p F $set_bclust`;
	`cp $seq.clust.info $seq.clust.info.all`;
	my $head=`head -1 $seq.clust.info`;
	my @head=(split /\s+/, $head);
	my $i=1;
	while (@head>1 and $i<=10){
		`perl $script_path/bin/make_lib.pl $seq.list $seq.tmp $seq.clust.info`;
		`mv $seq.tmp.clust $seq.tmp`;
		`${blast}blastclust -i $seq.tmp -o $seq.clust.info -a $threads -p F $set_bclust`;
		`cat $seq.clust.info >> $seq.clust.info.all`;
		$head=`head -1 $seq.clust.info`;
		@head=(split /\s+/, $head);
		$i++;
		}
	print "$i\n";
	if (-e "$seq.tmp.clust"){
		`mv $seq.tmp.clust $seq.clust`;
		} else {
		`mv $seq.tmp $seq.clust`;
		}
	}
if ($cdhit==1){
	`${cdhitpath}cd-hit-est -i $seq -o $seq.clust $set_cdhit -T $threads`;
	}
`perl -i -ne 's/>(.*)\\|(.*)\\[(.+)\\]/>\$1\\|LTR_\$3/g;print "\$_"' $seq.clust`;
}

sub getLTR {
##get LTR regions from raw candidates (original internal boundary)
my $index=$_[0];
`perl $script_path/bin/get_range.pl 1 $index.retriever.scn $genome -N -g -max_ratio $max_ratio`;
`perl $script_path/bin/call_seq_by_list.pl $index.retriever.scn.list -C $genome itself > $index.ltrTE.LTR`;
`perl -i -ne 's/>(.*)\\\|(.*)/>\$2/g;print "\$_"' $index.ltrTE.LTR`;
}

